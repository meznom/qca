Burkhard, November 23 2010


Testing QCA exact diagonalisation
=================================

Verify exact diagonalisation code for the QCA systems by comparing against an
older Mathematica program (which I wrote this summer).


Contents
--------
  1. Bond base, one plaquet, energies                   [match]
  2. Quarter filled, one plaquet, energies              [match]
  3. Quarter filled, one plaquet, energies, Vext!=0     [match]
  4. Quarter filled, two plaquets, energies (1)         [match]
  5. Quarter filled, two plaquets, energies (2)         [match]
  6. Bond, two plaquets, energies                       [do not match]


1. Bond base, one plaquet, energies
-----------------------------------

$ ./runQca -E -beta 1000 -m bond -p 1 -Vext 0 -t 0.2 -td 0.04 -a 1 -b 1 -V0 10
0.427588        2                                                                                                                                                         
0.92    1
1.08    1                                                                                                                                                                 
1.27952 2

From "QCA Exact Diagonalisation General.nb" (PDF), page 9, same parameters:
0.43, 0.43, 0.92, 1.1 , 1.3 , 1.3

=> matches

2. Quarter filled, one plaquet, energies
----------------------------------------

$ ./runQca -E -beta 1000 -m qf -p 1 -Vext 0 -t 1 -td 0.2 -a 0.02 -b 0.035 -V0 500 
34.8124 1
35.0871 6
35.355  1
49.6    3
49.9911 2
50.1248 1
50.2682 6
50.4    4
500     1
500.009 2
500.018 1


Calculate delta energy (with respect to the lowest eigenvalue), for better comparability:

$ for i in `./runQca -E -beta 1000 -m qf -p 1 -Vext 0 -t 1 -td 0.2 -a 0.02 -b 0.035 -V0 500 | cut -f 1`; do echo $i `echo $i-34.8124 | bc -l`; done  | column -t
(modified) output of this command:
34.8124   1   0
35.0871   6   .2747
35.355    1   .5426
49.6      3   14.7876
49.9911   2   15.1787
50.1248   1   15.3124
50.2682   6   15.4558
50.4      4   15.5876
500       1   465.1876
500.009   2   465.1966
500.018   1   465.2056


From "QCA Exact Diagonalisation General.nb" (PDF), pages 11-13, same
parameters. Sadly, the precision is not very high:

35. 0
35. 0.27
35. 0.27
35. 0.27
35. 0.27
35. 0.27
35. 0.27
35. 0.54
50. 15. 
50. 15. 
50. 15. 
50. 15. 
50. 15. 
50. 15. 
50. 15. 
50. 15. 
50. 15. 
50. 15. 
50. 15. 
50. 15. 
50. 16. 
50. 16. 
50. 16. 
50. 16. 
500 470
500 470
500 470
500 470

=> matches

3. Quarter filled, one plaquet, energies, Vext!=0
-------------------------------------------------

$ ./runQca -E -beta 1000 -m qf -p 1 -Vext 10 -t 1 -td 0.2 -a 0.02 -b 0.035 -V0 500
25.173  1
25.1786 3                                                                                                                                                                 
39.8568 1
39.8654 3                                                                                                                                                                 
45.0905 3
45.0997 1                                                                                                                                                                 
49.9911 1
50.0004 3                                                                                                                                                                 
50.4631 1
50.4705 3                                                                                                                                                                 
60.0908 1
60.1052 3                                                                                                                                                                 
480.009 1
500.005 1                                                                                                                                                                 
500.013 1
520.009 1


From "QCA Exact Diagonalisation General.nb" (PDF), pages 13-14, same
parameters. Sadly, the precision is not very high:

25. 0
25. 0.0055
25. 0.0055
25. 0.0055
40. 15.
40. 15.
40. 15.
40. 15.
45. 20.
45. 20.
45. 20.
45. 20.
50. 25.
50. 25.
50. 25.
50. 25.
50. 25.
50. 25.
50. 25.
50. 25.
60. 35.
60. 35.
60. 35.
60. 35.
480 450
500 470
500 470
520 490

=> matches


4. Quarter filled, two plaquets, energies (1)
---------------------------------------------

$ ./runQca -E -beta 1000 -m qf -p 2 -Vext 10 -t 1 -td 0.2 -a 0.004 -b 0.007 -V0 2500 |head -n16
713.613	1
713.614	3
713.615	3
713.616	9
722.987	3
722.988	1
722.988	9
722.989	3
725.03	1
725.03	3
725.031	3
725.031	9
732.902	1
732.903	3
732.906	3
732.907	9


$ for i in `./runQca -E -beta 1000 -m qf -p 2 -Vext 10 -t 1 -td 0.2 -a 0.004 -b 0.007 -V0 2500 | cut -f 1 |head -n16 `; do echo $i `echo $i-713.613 | bc -l`; done  | column -t
(modified output):
713.613  1  0
713.614  3  .001
713.615  3  .002
713.616  9  .003
722.987  3  9.374
722.988  1  9.375
722.988  9  9.375
722.989  3  9.376
725.03   1  11.417
725.03   3  11.417
725.031  3  11.418
725.031  9  11.418
732.902  1  19.289
732.903  3  19.290
732.906  3  19.293
732.907  9  19.294


From "QCA Exact Diagonalisation General.nb" (PDF), pages 20-22, same
parameters. Sadly, the precision is not very high (in multiple colums):

7.1 * 10^2  0           7.2 * 10^2  9.4         7.3 * 10^2  11.
7.1 * 10^2  0.00076     7.2 * 10^2  9.4         7.3 * 10^2  11.
7.1 * 10^2  0.00076     7.2 * 10^2  9.4         7.3 * 10^2  11.
7.1 * 10^2  0.00076     7.2 * 10^2  9.4         7.3 * 10^2  11.
7.1 * 10^2  0.0023      7.2 * 10^2  9.4         7.3 * 10^2  11.
7.1 * 10^2  0.0023      7.2 * 10^2  9.4         7.3 * 10^2  11.
7.1 * 10^2  0.0023      7.2 * 10^2  9.4         7.3 * 10^2  11.
7.1 * 10^2  0.0031      7.2 * 10^2  9.4         7.3 * 10^2  11.
7.1 * 10^2  0.0031      7.2 * 10^2  9.4         7.3 * 10^2  11.
7.1 * 10^2  0.0031      7.2 * 10^2  9.4         7.3 * 10^2  11.
7.1 * 10^2  0.0031      7.2 * 10^2  9.4         7.3 * 10^2  11.
7.1 * 10^2  0.0031      7.2 * 10^2  9.4         7.3 * 10^2  11.
7.1 * 10^2  0.0031      7.2 * 10^2  9.4         7.3 * 10^2  11.
7.1 * 10^2  0.0031      7.2 * 10^2  9.4         7.3 * 10^2  19.
7.1 * 10^2  0.0031      7.2 * 10^2  9.4         7.3 * 10^2  19.
7.1 * 10^2  0.0031      7.3 * 10^2  11.
7.2 * 10^2  9.4         7.3 * 10^2  11.
                        7.3 * 10^2  11.

=> matches


5. Quarter filled, two plaquets, energies (2)
---------------------------------------------

$ ./runQca -E -beta 1000 -m qf -p 2 -Vext 0.1 -t 1 -td 0 -a 0.001 -b 0.00175 -V0 1000000 |head -n25
2895.12	1
2895.12	2
2895.12	1
2895.12	2
2895.12	1
2895.12	7
2895.12	2
2895.32	1
2895.32	1
2895.32	1
2895.32	1
2895.32	1
2895.32	2
2895.32	4
2895.32	5
2934.7	8
2934.7	1
2934.7	2
2934.7	1
2934.7	3
2934.71	1
2934.87	6
2934.87	2
2934.87	1
2934.87	3


From "QCA Limits.nb" (PDF), page 6, same
parameters (distinct eigenenergies):

2895.12, 2895.12, 2895.12, 2895.12, 2895.32, 2895.32, 2895.32, 2895.32, 
2934.7, 2934.7, 2934.7, 2934.71

=> matches


6. Bond, two plaquets, energies
-------------------------------

$ ./runQca -E -beta 1000 -m bond -p 2 -Vext 0.1 -t 1 -td 0 -a 0.001 -b 0.00175 -V0 1000000 |head -n5
2895.12	1
2895.32	1
2934.7	1
2934.87	1
2936.78	1


From "QCA Limits.nb" (PDF), page 6, same
parameters (distinct eigenenergies):

2894.22, 2896.22

=> does not match

However, the problem might also be in the Mathematica program, as I never
tested the two-plaquet bond system most thoroughly. This is suggested by the
fact that my runQca bond eigenenergies match the eigenenergies of runQca
quartfilled as well as Mathematica quarterfilled (see section 5 above) for the
same parameter set.










Burkhard, December 9 2010

Testing against older version of the diagonaliser
=================================================

old version: cde7d8f8097f4eec90f959986afd48f23978128f
new version: 14d0c4d3fe11e16c21a89bf5fc403f1ca8530220

testing bond basis and energy spectrum (can't easily test polarisation as I
changed the the normalisation)
 1 plaquet works (with and without td, for different Vext)
 2 plaquets work (with and without td, for different Vext)

testing quarterfilled basis and energy spectrum (can't easily test polarisation
as I changed the the normalisation)
 1 plaquet works (with and without td, for different Vext)
 2 plaquets work (with and without td, for different Vext)



Testing against Mathematica
===========================

For dead plaquet / dead cell systems.

commit 14d0c4d3fe11e16c21a89bf5fc403f1ca8530220


1. One plaquet, Quarterfilled, Pext=0
-------------------------------------

$ a=`echo 1/250|bc -l`; b=`echo 1.75*$a|bc -l`; V0=`echo 10*1/$a|bc -l`;\
  ./runQca -P 0 -beta 1000 -m quarterDP -p 1 -Pext 0 -Vext 0 -t 1 -td 0.2 -a $a -b $b -V0 $V0
0	-1.59489e-12

From "QCA Test.pdf" page 5:
5.1593 * 10^-14

=> matches (both values are basically zero)


2. One plaquet, Quarterfilled, Pext=0.1
---------------------------------------

$ a=`echo 1/250|bc -l`; b=`echo 1.75*$a|bc -l`; V0=`echo 10*1/$a|bc -l`;\ 
  ./runQca -P 0 -beta 1000 -m quarterDP -p 1 -Pext 0.1 -Vext 0 -t 1 -td 0.2 -a $a -b $b -V0 $V0
0	0.895166

From "QCA Test.pdf" page 5:
0.895166

=> matches


3. Two plaquets, quarterfilled, Pext=0
--------------------------------------

$ a=`echo 1/250|bc -l`; b=`echo 1.75*$a|bc -l`; V0=`echo 10*1/$a|bc -l`;\
  ./runQca -P '[0,1]' -beta 1000 -m quarterDP -p 2 -Pext 0 -Vext 0 -t 1 -td 0.2 -a $a -b $b -V0 $V0
0	3.01196e-11	5.9962e-13

In Mathematica (on num.srv.ualberta.ca):
    In[45]:= QcaDeadCellConstructor[s2, 2];
    In[56]:= params = {a -> 1/250, b -> 1.75 a, V0 -> 10*1/a, td -> 0.2 t,
        t -> 1, ti -> 0, P -> 0};
    es = QcaGetEigensystem[s2, params];
    {expectationValue[s2["P"][1], es[[1]][[2]]],
     expectationValue[s2["P"][2], es[[1]][[2]]]}
{9.16392*10^-12,1.8161*10^-13}

=> matches, more or less


Mathematica code is in a file called "QCA Test Polarisation.nb", though it's
not in Mercurial at the moment.


4. Two plaquets, quarterfilled, Pext>0 (1)
------------------------------------------

Commands are the same as above. Except that now beta=1000000.

Pext=0.1
0	0.992819	0.0199309
{0.992819,0.0199309}

Pext=0.2
0	0.99756	0.0201398
{0.99756,0.0201398}

Pext=0.01
0	0.662126	0.0132277
{0.662126,0.0132277}

=> matches


5. Two plaquets, quarterfilled, Pext>0 (2)
------------------------------------------

Use a different parameter set. 
$ a=`echo 1/100|bc -l`; b=`echo 3*$a|bc -l`; V0=`echo 10*1/$a|bc -l`;\
  ./runQca -P '[0,1]' -beta 1000000 -m quarterDP -p 2 -Pext 0.01 -Vext 0 -t 1 -td 0 -a $a -b $b -V0 $V0

Pext=0.01
0	0.0458749	0.0420448
{0.0458749,0.0420448}

Pext=0.1
0	0.414424	0.379367
{0.414424,0.379367}

Pext=-0.8
0	-0.944481	-0.849892
{-0.944481,-0.849892}

=> matches


6. One plaquet, bond
--------------------

$ a=`echo 1/250|bc -l`; b=`echo 1.75*$a|bc -l`; V0=`echo 10*1/$a|bc -l`;\
  ./runQca -P '[0]' -beta 1000000 -m bondDP -p 1 -Pext 0 -Vext 0 -t 1 -td 0.2 -a $a -b $b -V0 $V0

Pext=0
0   -5.57882e-12
{0.998701}

Pext=0.01
0	0.291808
{0.9987}

Pext=0.05
0	0.820737
{0.998693}

Pext=0.1
0	0.928389
{0.998675}

=> doesn't match


As observed earlier, there seems to be something wrong with bond system. Let's
assume for the moment that my C++ code is correct (definitely looks more
reasonable) and that the Mathematica code is wrong. And postpone looking for
the source of the error until after the deadline of the term project.


Testing grand canonical system
==============================

Simplest testing scheme: Test whether the quarterfilled energy eigenvalues are
contained within the energy spectrum of the grand canonical system (for mu=0).

$ a=`echo 1/250|bc -l`; b=`echo 1.75*$a|bc -l`; V0=`echo 10*1/$a|bc -l`;\
  ./runQca -E -beta 1000000 -m quarter -p 1 -Pext 0 -Vext 0 -t 1 -td 0 -a $a -b $b -V0 $V0

One plaquet. Tested grand against quarter for Vext=0,0.1,1 and for Vext=1 also
with td=0 and td=0.2. Matches. Also tested grandDP against quarterDP for
Pext=0,0.1. Matches.

Two plaquets. grand gives a segfault. Debug version fails an assertion. And the
assertion checks that the matrix is not too big for my computer's memory. No
surprises here: For the grand canonical system the dense Hamiltonian matrix is
2^16*2^16*8 = 32GB. So I have to implement the diagonalisation part with sparse
matrices.

After the construction of H for the two plaquet grand canonical system the
number of non-zero elements in the matrix is: 589823. That's 4.5MB in memory
which is not too much at all.
